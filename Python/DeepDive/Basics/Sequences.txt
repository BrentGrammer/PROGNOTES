
SEQUENCES:

-Key: Sequences have positional ordering (the order of the elements is important and in place) and are iterable
 i.e. a list is a sequence type, but a set is not (it does not have positional ordering)

-If you have an object that can provide an element at a given index number, it is a sequence
-The sequence should be iterable using builtin looping mechanisms

Sequence types in Python:

-Mutable:
  Lists
  bytearrays
-Immutable:
  Strings
  Tuples
  Range
  bytes

-From the standard library collections:
  namedtuple
  deque
-array module:
  array

---

HOMOGENEOUS VS HETEROGENEOUS SEQUENCES:

Homoegenous: every element in the sequence is of the same type (i.e. a string is all chars)

Heterogeneous: each element can/may be a different type. (i.e. lists are heterogeneous)

---

ITERABLE TYPE VS SEQUENCE TYPE:

-A type is iterable if it is a container type of object and each element can be listed out one by one.

***ANY Sequence type is Iterable**

** An Iterable is not necessarily a Sequence on the other hand
  Ex: A set has elements which can be listed out one by one, but the position and order of the elements is not significant.

======

BUILT IN STANDARD METHODS FOR SEQUENCES:

x in s
x not in s

# **Caution using these with immutable elements in a seq (see note at below)
s1 + s1 # concatenation - can only be done on same type (not supported on range)
s * n, n * s # repitition (not supported on range)

len(s) # length: does not work on infinite sequences

min(s)
max(s)  # if ordering is defined (ability to compare elements by pairs)

s.index(search) # get index of a element in a sequence - gives first occurence
s.index(search, i) # start at index i to find first occurence
s.index(search, i, j) # look between i and j

s[i] # retrieve value at index i
s[i:j] # retrieve slice of values; start -inclusive, end-exclusive
s[i:j:k] # k is the step if the slice
# Note: with slice you get back the same container type (list, string etc)

# NOTE on Ranges:
  -more limited
  -do not support concatenation and repitition
  -min, max, in, not are not as efficient

-Immutable sequences without mutable typed els may support hashing:
  hash(s)

**CAUTION: When concatenating and repeating sequences with mutable data!

x = [ [0,0] ]
a = x + x # --> [ [0,0], [0,0] ]
a[0][0] = 10 # --> [ [100,0], [100,0] ] - both elements changed since they share  mem addr

*Python duplicates the internal mutable elements with concatentaiion and repitition - the duplicated elements will have the same memory address and be the same object

-This is safe, however with immutable types:

Ex:
names = ['bill', 'bob']
name = names + ['joe'] # -> ['bill', 'bob'. 'joe'] - new mem addr and object

# When concatenating sequences with immutable elements, Python creates a NEW object at a different memory address in this case!
Note: this is not the case if using names.append('joe')

CONCATENTATION:

+ and += are different operators and can function differently:

# With immutable types they are the same (tuples, ints, strings):
a = a + 10 is the same as a += 10 
(A new object is created at a different addr and a is pointed to that instead)

# With mutable sequences they function differently:

l1 = [1,2,3]
l2 = [4,5,6]

l1 += l2 # -> it concatenates IN PLACE so l1 is pointing to same mem addr 
and the object at that address is now [1,2,3,4,5,6]

new_lst = l1 + l2 
# this creates a new list object at a different addr: [1,2,3,4,5,6]

NOTE: the same behavior applies to * and *= for repetition


======================

MUTABLE SEQUENCES:

-Mutation: changing an object's state without creating a new object

Ex of mutating a list:


names = ['bill', 'bob']
names.append('joe') # -> ['bill', 'bob'. 'joe'] -> same list obj is changed, names points to same object

NOTE ON APPEND: Python preallocates extra memory when an item is appended to a list with .append() to make adding more items more efficient - be aware of this memory overhead.  The preallocated amount to add becomes bigger as the list grows.

WAYS TO MUTATE A SEQUENCE:

s[i] = new # set element at idx to a new element

s[i:j] = s2 # sliced portion is replaced by contents of s2
s[i:j:k] = s2 # assign to an extended slice

del s[i]
del s[i:j]  # remove elements..

s.clear() # remove all els;supported by lists, mutable sequence types, but not all
s.append(x) # adds item mutating the sequence
s.insert(idx, x)
s.extend(iterable) # appends every el of an iterable to the end of s
s.pop(i) # removes element at index i and returns it as well
s.remove(x) # remove specific element from the sequence

s.reverse() # in-place reversal of the sequence

s.copy() # shallow copies all els into a new sequence and returns the new sequence

  
===================

Left off at 12:30

COPYING SEQUENCES:

-Avoid mutating arguments passed into a function - make copies of these sequenceis to return

-Use a list comphrehension:
copy = [e for e in s] # returns a new list of every el in sequence s

copy = s.copy() # does not work on immutables like tuples and strings

copy = s[:] # slice returns a copy

copy = list(list_1) 
# list contructor returns a copy (Note: tuple constructor and slicing does not return a copy of a tuple)

SHALLOW VS DEEP COPYING:

Shallow Copying: 
-Copying object references from one sequences to another.
i.e.:
lst = [1,2] # id(lst) -> 1000, id(lst[0]) -> 2000, id(lst[1]) -> 3000

cp = lst.copy() # id(cp) -> 5000 -this is different, id(cp[0]) -> 2000 (same addr as original), id(cp[1]) -> 3000 (same)

IOW, the container is made to a new mem addr, but the internal elements point to the same references as the original.

***This is not an issue if the elements are immutable as a new object will be created with a new mem addr.
***This is an issue when the elements are mutable, since the object at the original mem addr will be mutated, changing the element in the original container of the copy.

DEEP COPYING:

-When working with mutable objects, shallow copying may not be suffiecient to protect the original from mutating.  

-Make a deep copy:

# with a list comprehension to make a copy of every element in the container:
s = [ [0,0]. [0,0] ]

cp = [el.copy for el in s]

-Use the standard library copy module which has a deepcopy function:

  import copy

  lst_cp = copy.deepcopy(lst)


*Note: it is possible to overide the __copy__ and __deepcopy__ methods on a custom object.

====================

NOTE ON TUPLES:

-Use over lists if possible - tuples are much more efficient. 

-they use constant folding which means that they evaluate constants (immutable types) at compile time instead of at runtime.

**If you have a sequence of immutable types and do not need a container (i.e. a list), then use a tuple - much faster and more efficient

==================

SLICES:

start is inclusive, end is exclusive
-can be used on sequences: tuples, lists and strings (not sets which is not a sequence)

# A slice object is created by Python and independent from the sequence.  It is applied to the sequence as follows:

-lst[0:2] 

*You can create named slices:
  -Very useful for reusing slice patterns instead of literal numbers

s = slice(0, 2) # slice constructor has a start and end param
l = [1,2,3,4,5]

l[s] # applies slice to list l (to return [1,2]

-Negative slices:

l[-1] # returns last element

-You can assign a negative step as well:

l = ['a','b','c','d','e','f']
l[-1:-4:-1] # ['f','e','d'] returns last 3 els

l[5:2:-1] # -> ['f', 'e','d']
l[5:2:-2] # -> ['f','d']

# rEVERSE A STRING:

reversed = string[::-1] 

-If you slice from a negative idx that is below the range, then the slice will begin at 0:

formula: if i < 0: max(0, len(seq) + i

l[-10:3] # returns from idx 0 to 2 (excl 3)
l[-5:3] # returns from idx 1 to 3 (len(l) + -5 == 1)

[i:j:k]
-If i is ommitted and j and k are negative, the length of the sequence will be used as the start:
l[:-2:-1] # -> returns idx 5 (the len of l) ['f']

***CAUTION:  You can wind up with empty slices using extended slices when k is negative:

if k < 0: J = max(-1, len(s) - 1) -> will return the len -1 poss as end range

Ex:
l[3:-1:-1] # -> range(3, 5, step=-1) -- you can't go from 3 to 5 in -1 steps so the slice will be empty

*To help with this, you can use the indices helper on the slice object:

# returns equivalent range def of a dsequence of given length
slice(start, end, step).indices(length of seq) # -> returns (start, stop, step)

----

ASSIGNING TO MUTABLE SEQUENCES WITH SLICES:

-Mutable sequences support assignment to a specific index via an index or a slice

-Assign a slice (without a step) of a mutable sequence to an iterable (i.e. a list, tuple or set).  
-This will assign and replace values starting at the start of the slice and overwriting everything up until the end index of the slice.
Note: in a standard slice, the assignment slice can have a greater number of elements than the portion of the slice it is replacing

l = [1,2,3,4,5]

l[1:3] = (10,20,30) # -> l = [1,10,20,30,4,5]

Ex with extended slices:

-The iterable assigned must match the number of elements targeted by the extended slice

l = [1,2,3,4,5] # l[0:4:2] = [1,3]

l[0:4:2] = [10,30] # -> [10,2,30,4,5]

-Deleting elements:

-Replacement with Empty by assigning the slice to an empty iterable sequence:

l[2:3] = [] # -> [1,4,5]

INSERTING:

Note: does not work with extended slices - no step.

-Assign an empty slice to values (the start and end needs to be the same in the slice):

l = [1,2,3]

l[1:1] # -> [1,'a','b','c',2,3]

NOTE: Careful when replacing or inserting with a set - the order is not gauranteed.


=================

CUSTOM SEQUENCES:

-Should be iterable
-Should be able to return a given element at given index number

To Create a Custom Sequence:
-incorporate the __len__ method
-incorporate __getitem__ method
-should raise an IndexError exception if out of bounds argument provided
-optionally support negative indices and slicing

-----

Example of custom Immutable sequence type:

# n is a passed in integer that is assigned to length
class Silly:
  def __init__(sekf, n):
    self.n = n

  def __len__(self):
    return self.n

  def __getitem__(self, value):
    if value < 0 or value >= self.n:
      raise IndexError

    return 'This is a silly element'

Note: this is technically a sequence because it has a __len__ method storing a number of elements and the __getitem__ method which retrieves a element given an index int.  

under the hood Python uses the __len__ and __getitem__ methods to create a while loop for iteration.  You must raise an IndexError to prevent a infinite loop.

silly = Silly(5)

for i in silly:
  print(i)

# returns 
 'This is a silly element'
 'This is a silly element'
 'This is a silly element'
 'This is a silly element'
 'This is a silly element'

-You can also convert your custom sequence type into a list:

lst = list(silly)

Add Support for slicing:

class Fib:
  def __init__(self, n):
    self.n = n

  def __len__(self):
    return self.n

  def __getitem__(self, value):
    if isinstance(value, int):
      # negative indexes:
      if value < 0:
        value = self.n + value
      if value < 0 or value >= self.n:
        raise IndexError
      else:
        return Fib._fib(value)
    else:
      # isinstance(value, slice)
      range_tuple = value.indices(self.n) # method on slice objs
      start, stop, step = range_tuple  
      rng = range(start, stop, step)
      return [Fib._fib(i) for i in rng]

  def _fib(n):
    ...fib code returns an int

-----------

Overwriting concatenation methods:

+ operator --> overwrite and implement __add__
+= operator --> overwrite and implement __iadd__

Conventions for concatenation:

+ operator: both items are of the same type and a new object of that type is created

+= operator: the object being added is of any iterable type and the result is the mutated original memory reference (in place concatenation)

-To assign to an index or slice, implement the __setitem__ method

other methods to support:

__contains__ # returns boolean if item is in the sequence
__delitem__
append
extend
pop

__rmul__ # this is used if you want python to call methods on the right operand first passing in the left operand (by default Python does the reverse, i.e. a + b ---> a.__add__(b) )

------------------

SORTING SEQUENCES:

-sorted(iter, key=None, reverse=False) 

- makes a copy of the iterable, is not in place by default
  (in place sorting is possible if the iterable is mutable)
- always returns a list no matter what is being sorted
- Is a stable sort: retains relative order of items with equal keys

  -default order is ascending
  -default sort key is None - python will try to sort elements naturally
   (*Must pass in a function, i.e. a lambda to the key param)
  -default reversed argument is set to false
  -To make order descending, set reverse=True

--

Ex sorting a list:

# lists have a built in sort helper method that sorts IN PLACE:
l = [10,5,3,2]

l.sort() # inplace mutation sort, l == [2,3,5,10]

**sorted(l) # -> not inplace and returns a new list. 

Note: the in place .sort() is more efficient than the .sorted() since it does not need to make a copy of the list.  This may only be significant in extremely large lists.

--

Ex sorting a tuple:

t = 3,2,5,10

sorted(t) # -> [2,3,5,10] Note: returns a list

--

Sorting a dictionary:

-sorted returns a list of the keys sorted:

#python iterates over the keys by default for what to sort
d = {3:100, 2:33, 1: 23}
sorted(d) # -> [1,2,3]

# sort based on the values of the dict, not the keys:
d = {'a': 100, 'b': 50, 'c': 10}

sorted(d, key=lambda k: d[k]) 
# ['c','b','a']

--

Ex sorting words based on their length:

t = 'this', 'parrot', 'is', 'a', 'bird
def sort_key(s):
  return len(s)
sorted(t, key=sort_key) # returns list of strings based on their length
# Note: python passes in the default iterator key into the function passed into key parameter


--

ORDERING:

-When items are pairwise comparable ( x > y), that can be used to sort.

Sort Keys:
-When items are not pairwise comparable, you use a sort key
-Assigns a comparable value to every element.
-sort keys do not have to be numerical, just sortable (i.e. could be letters)

Python provides the key parameter in sort for this.

Ex: Letters have ASCII sort keys - ord('a') # --> 97

Ex using a key on an dictionary:

def key(p):
  return p.age

key = lambda p: p.age

Stable ordering:

p1.age -> 15
p2.age -> 5
p3.age -> 15

sorted will result in: [p2, p1, p3]  # the order of the equal elements is maintained based on their original positions in the unsorted sequence

-To specify a ordering for the sorted to use on a custom class, define and override the __lt__ or __gt__ method on the class:

def My_Class:
  def __init__(self, name, val):
    self.name = name
    self.val = val

  def __lt__:
    # base the ordering off of the val of the class
    return self.val < other.val
    
  
c1 = My_Class('c1', 20)
c2 = My_Class('c2', 10)

sorted([c1, c2]) # -> [c2, c1]  Based on the val of the class, not the name since __lt__ specifies the ordering on this attribute










